a:5:{i:0;a:6:{s:4:"type";i:16384;s:7:"message";s:305:"Method "Symfony\Component\DependencyInjection\Extension\ExtensionInterface::load()" might add "void" as a native return type declaration in the future. Do the same in implementation "App\DependencyInjection\FileExtension" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:84:"C:\xampp\htdocs\php_event_listener\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:72:"C:\xampp\htdocs\php_event_listener\vendor\symfony\http-kernel\Kernel.php";s:4:"line";i:633;s:8:"function";s:5:"build";s:5:"class";s:10:"App\Kernel";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:1;a:6:{s:4:"type";i:16384;s:7:"message";s:313:"Method "Symfony\Component\EventDispatcher\EventSubscriberInterface::getSubscribedEvents()" might add "array" as a native return type declaration in the future. Do the same in implementation "App\EventSubscriber\RequestSubscriber" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:84:"C:\xampp\htdocs\php_event_listener\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:92:"C:\xampp\htdocs\php_event_listener\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:2;a:6:{s:4:"type";i:16384;s:7:"message";s:256:"Method "Symfony\Component\Form\AbstractType::buildForm()" might add "void" as a native return type declaration in the future. Do the same in child class "App\Form\FileType" now to avoid errors or add an explicit @return annotation to suppress this message.";s:4:"file";s:84:"C:\xampp\htdocs\php_event_listener\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:92:"C:\xampp\htdocs\php_event_listener\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}i:3;a:6:{s:4:"type";i:16384;s:7:"message";s:61:"Please install the "intl" PHP extension for best performance.";s:4:"file";s:109:"C:\xampp\htdocs\php_event_listener\vendor\symfony\framework-bundle\DependencyInjection\FrameworkExtension.php";s:4:"line";i:295;s:5:"trace";a:1:{i:0;a:5:{s:4:"file";s:115:"C:\xampp\htdocs\php_event_listener\vendor\symfony\dependency-injection\Compiler\MergeExtensionConfigurationPass.php";s:4:"line";i:76;s:8:"function";s:4:"load";s:5:"class";s:69:"Symfony\Bundle\FrameworkBundle\DependencyInjection\FrameworkExtension";s:4:"type";s:2:"->";}}s:5:"count";i:1;}i:4;a:6:{s:4:"type";i:16384;s:7:"message";s:177:"The "Monolog\Logger" class is considered final. It may change without further notice as of its next major version. You should not extend it from "Symfony\Bridge\Monolog\Logger".";s:4:"file";s:84:"C:\xampp\htdocs\php_event_listener\vendor\symfony\error-handler\DebugClassLoader.php";s:4:"line";i:337;s:5:"trace";a:1:{i:0;a:3:{s:4:"file";s:92:"C:\xampp\htdocs\php_event_listener\vendor\symfony\config\Resource\ClassExistenceResource.php";s:4:"line";i:76;s:8:"function";s:12:"class_exists";}}s:5:"count";i:1;}}